
Objects/Chained_writes.o:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	1c c0       	rjmp	.+56     	; 0x3e <__bad_interrupt>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	20 e0       	ldi	r18, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a6 36       	cpi	r26, 0x66	; 102
  36:	b2 07       	cpc	r27, r18
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	02 d0       	rcall	.+4      	; 0x40 <main>
  3c:	72 c0       	rjmp	.+228    	; 0x122 <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <main>:
	#ifdef __AVR_ATtiny10__
		CCP=0xD8;		// configuration change protection, write signature
		CLKPSR=0;		// set cpu clock prescaler =1 (8Mhz) (attiny 4/5/9/10)
		mask=_BV(PB2);
	#else
		CLKPR=_BV(CLKPCE);
  40:	80 e8       	ldi	r24, 0x80	; 128
  42:	86 bd       	out	0x26, r24	; 38
		CLKPR=0;			// set clock prescaler to 1 (attiny 25/45/85/24/44/84/13/13A)		
  44:	16 bc       	out	0x26, r1	; 38
		mask=_BV(PB0);
	#endif
		DDRB|=mask;
  46:	b8 9a       	sbi	0x17, 0	; 23

	led[0].r=16;led[0].g=00;led[0].b=00;		// LED 0 is red
  48:	80 e1       	ldi	r24, 0x10	; 16
  4a:	80 93 61 00 	sts	0x0061, r24
  4e:	10 92 60 00 	sts	0x0060, r1
  52:	10 92 62 00 	sts	0x0062, r1
	led[1].r=16;led[1].g=16;led[1].b=16;		// LED 1 is White
  56:	80 93 64 00 	sts	0x0064, r24
  5a:	80 93 63 00 	sts	0x0063, r24
  5e:	80 93 65 00 	sts	0x0065, r24

int main(void)
{
	uint8_t mask;
	uint8_t pos=0;
	uint8_t direction=1;	
  62:	d1 e0       	ldi	r29, 0x01	; 1
struct cRGB led[2];

int main(void)
{
	uint8_t mask;
	uint8_t pos=0;
  64:	c0 e0       	ldi	r28, 0x00	; 0
	led[1].r=16;led[1].g=16;led[1].b=16;		// LED 1 is White
	
	while(1)
    {
	
		for (i=0; i<pos; i++) 
  66:	10 e0       	ldi	r17, 0x00	; 0
  68:	1c 17       	cp	r17, r28
  6a:	39 f0       	breq	.+14     	; 0x7a <main+0x3a>
			ws2812_sendarray((uint8_t *)&led[0],3);			// Repeatedly send "red" to the led string. 
  6c:	63 e0       	ldi	r22, 0x03	; 3
  6e:	70 e0       	ldi	r23, 0x00	; 0
  70:	80 e6       	ldi	r24, 0x60	; 96
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	54 d0       	rcall	.+168    	; 0x11e <ws2812_sendarray>
	led[1].r=16;led[1].g=16;led[1].b=16;		// LED 1 is White
	
	while(1)
    {
	
		for (i=0; i<pos; i++) 
  76:	1f 5f       	subi	r17, 0xFF	; 255
  78:	f7 cf       	rjmp	.-18     	; 0x68 <main+0x28>
  7a:	10 e0       	ldi	r17, 0x00	; 0
			ws2812_sendarray((uint8_t *)&led[0],3);			// Repeatedly send "red" to the led string. 
															// No more than 1-2µs should pass between calls
															// to avoid issuing a reset condition.			
		for (i=0; i<(16-pos); i++) 
  7c:	21 2f       	mov	r18, r17
  7e:	30 e0       	ldi	r19, 0x00	; 0
  80:	80 e1       	ldi	r24, 0x10	; 16
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	8c 1b       	sub	r24, r28
  86:	91 09       	sbc	r25, r1
  88:	28 17       	cp	r18, r24
  8a:	39 07       	cpc	r19, r25
  8c:	3c f4       	brge	.+14     	; 0x9c <main+0x5c>
			ws2812_sendarray((uint8_t *)&led[1],3);			// white
  8e:	63 e0       	ldi	r22, 0x03	; 3
  90:	70 e0       	ldi	r23, 0x00	; 0
  92:	83 e6       	ldi	r24, 0x63	; 99
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	43 d0       	rcall	.+134    	; 0x11e <ws2812_sendarray>
	
		for (i=0; i<pos; i++) 
			ws2812_sendarray((uint8_t *)&led[0],3);			// Repeatedly send "red" to the led string. 
															// No more than 1-2µs should pass between calls
															// to avoid issuing a reset condition.			
		for (i=0; i<(16-pos); i++) 
  98:	1f 5f       	subi	r17, 0xFF	; 255
  9a:	f0 cf       	rjmp	.-32     	; 0x7c <main+0x3c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	2f ef       	ldi	r18, 0xFF	; 255
  9e:	80 e7       	ldi	r24, 0x70	; 112
  a0:	92 e0       	ldi	r25, 0x02	; 2
  a2:	21 50       	subi	r18, 0x01	; 1
  a4:	80 40       	sbci	r24, 0x00	; 0
  a6:	90 40       	sbci	r25, 0x00	; 0
  a8:	e1 f7       	brne	.-8      	; 0xa2 <main+0x62>
  aa:	00 c0       	rjmp	.+0      	; 0xac <main+0x6c>
  ac:	00 00       	nop
			ws2812_sendarray((uint8_t *)&led[1],3);			// white
			
		
		_delay_ms(50);										// Issue reset and wait for 50 ms.
		
		pos+=direction;		
  ae:	cd 0f       	add	r28, r29
		if ((pos==16)||(pos==0)) direction=-direction;
  b0:	8c 2f       	mov	r24, r28
  b2:	8f 7e       	andi	r24, 0xEF	; 239
  b4:	c1 f6       	brne	.-80     	; 0x66 <main+0x26>
  b6:	d1 95       	neg	r29
  b8:	d6 cf       	rjmp	.-84     	; 0x66 <main+0x26>

000000ba <ws2812_sendarray_mask>:
void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;
  
  masklo	=~maskhi&ws2812_PORTREG;
  ba:	38 b3       	in	r19, 0x18	; 24
  bc:	24 2f       	mov	r18, r20
  be:	20 95       	com	r18
  c0:	23 23       	and	r18, r19
  maskhi |=        ws2812_PORTREG;
  c2:	38 b3       	in	r19, 0x18	; 24
  c4:	34 2b       	or	r19, r20
  sreg_prev=SREG;
  c6:	4f b7       	in	r20, 0x3f	; 63
  cli();  
  c8:	f8 94       	cli
  ca:	fc 01       	movw	r30, r24
  cc:	68 0f       	add	r22, r24
  ce:	79 1f       	adc	r23, r25

  while (datlen--) {
  d0:	e6 17       	cp	r30, r22
  d2:	f7 07       	cpc	r31, r23
  d4:	89 f0       	breq	.+34     	; 0xf8 <loop39+0x1e>
    curbyte=*data++;
  d6:	81 91       	ld	r24, Z+
    
    asm volatile(
  d8:	98 e0       	ldi	r25, 0x08	; 8

000000da <loop39>:
  da:	38 bb       	out	0x18, r19	; 24
  dc:	00 00       	nop
  de:	00 c0       	rjmp	.+0      	; 0xe0 <loop39+0x6>
  e0:	87 ff       	sbrs	r24, 7
  e2:	28 bb       	out	0x18, r18	; 24
  e4:	88 0f       	add	r24, r24
  e6:	00 00       	nop
  e8:	00 c0       	rjmp	.+0      	; 0xea <loop39+0x10>
  ea:	00 c0       	rjmp	.+0      	; 0xec <loop39+0x12>
  ec:	00 c0       	rjmp	.+0      	; 0xee <loop39+0x14>
  ee:	28 bb       	out	0x18, r18	; 24
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <loop39+0x18>
  f2:	9a 95       	dec	r25
  f4:	91 f7       	brne	.-28     	; 0xda <loop39>
  f6:	ec cf       	rjmp	.-40     	; 0xd0 <ws2812_sendarray_mask+0x16>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
  f8:	4f bf       	out	0x3f, r20	; 63
  fa:	08 95       	ret

000000fc <ws2812_setleds_pin>:
   ws2812_setleds_pin(ledarray,leds, _BV(ws2812_pin));
}

void inline ws2812_setleds_pin(struct cRGB *ledarray, uint16_t leds, uint8_t pinmask)
{
  ws2812_DDRREG |= _BV(ws2812_pin); // Enable DDR
  fc:	b9 9a       	sbi	0x17, 1	; 23
  ws2812_sendarray_mask((uint8_t*)ledarray,leds+leds+leds,pinmask);
  fe:	9b 01       	movw	r18, r22
 100:	22 0f       	add	r18, r18
 102:	33 1f       	adc	r19, r19
 104:	26 0f       	add	r18, r22
 106:	37 1f       	adc	r19, r23
 108:	b9 01       	movw	r22, r18
 10a:	d7 df       	rcall	.-82     	; 0xba <ws2812_sendarray_mask>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10c:	87 ec       	ldi	r24, 0xC7	; 199
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <ws2812_setleds_pin+0x14>
 114:	00 c0       	rjmp	.+0      	; 0x116 <ws2812_setleds_pin+0x1a>
 116:	00 00       	nop
 118:	08 95       	ret

0000011a <ws2812_setleds>:
#include <avr/io.h>
#include <util/delay.h>
 
void inline ws2812_setleds(struct cRGB *ledarray, uint16_t leds)
{
   ws2812_setleds_pin(ledarray,leds, _BV(ws2812_pin));
 11a:	42 e0       	ldi	r20, 0x02	; 2
 11c:	ef cf       	rjmp	.-34     	; 0xfc <ws2812_setleds_pin>

0000011e <ws2812_sendarray>:
  _delay_us(50);
}

void ws2812_sendarray(uint8_t *data,uint16_t datlen)
{
  ws2812_sendarray_mask(data,datlen,_BV(ws2812_pin));
 11e:	42 e0       	ldi	r20, 0x02	; 2
 120:	cc cf       	rjmp	.-104    	; 0xba <ws2812_sendarray_mask>

00000122 <_exit>:
 122:	f8 94       	cli

00000124 <__stop_program>:
 124:	ff cf       	rjmp	.-2      	; 0x124 <__stop_program>
