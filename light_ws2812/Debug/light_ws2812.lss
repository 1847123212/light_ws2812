
light_ws2812.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000011c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000011c  000001b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800060  00800060  000001b0  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000001b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  0000087c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00000908  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000055e  00000000  00000000  000009a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000217  00000000  00000000  00000f06  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000445  00000000  00000000  0000111d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00001564  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000012c  00000000  00000000  000015ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000061  00000000  00000000  000016d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001739  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	ec e1       	ldi	r30, 0x1C	; 28
  32:	f1 e0       	ldi	r31, 0x01	; 1
  34:	02 c0       	rjmp	.+4      	; 0x3a <__CCP__+0x6>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	a0 36       	cpi	r26, 0x60	; 96
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__CCP__+0x2>

00000040 <__do_clear_bss>:
  40:	10 e0       	ldi	r17, 0x00	; 0
  42:	a0 e6       	ldi	r26, 0x60	; 96
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a9 36       	cpi	r26, 0x69	; 105
  4c:	b1 07       	cpc	r27, r17
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	1d d0       	rcall	.+58     	; 0x8c <main>
  52:	62 c0       	rjmp	.+196    	; 0x118 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <ws2812_sendarray>:
*/

#if defined ws2812_16MHz

void ws2812_sendarray(uint8_t *data,uint16_t datlen)
{
  56:	fc 01       	movw	r30, r24
	uint8_t curbyte,ctr;	
	
	while (datlen--) {
  58:	61 15       	cp	r22, r1
  5a:	71 05       	cpc	r23, r1
  5c:	b1 f0       	breq	.+44     	; 0x8a <end20+0x6>
		curbyte=*data++;	
  5e:	81 91       	ld	r24, Z+
						
		asm volatile(
  60:	98 e0       	ldi	r25, 0x08	; 8

00000062 <loop20>:
  62:	c1 9a       	sbi	0x18, 1	; 24
  64:	88 0f       	add	r24, r24
  66:	9a 95       	dec	r25
  68:	00 00       	nop
  6a:	08 f0       	brcs	.+2      	; 0x6e <loop20+0xc>
  6c:	c1 98       	cbi	0x18, 1	; 24
  6e:	00 00       	nop
  70:	00 00       	nop
  72:	08 f4       	brcc	.+2      	; 0x76 <loop20+0x14>
  74:	c1 98       	cbi	0x18, 1	; 24
  76:	31 f0       	breq	.+12     	; 0x84 <end20>
	...
  80:	00 00       	nop
  82:	ef cf       	rjmp	.-34     	; 0x62 <loop20>

00000084 <end20>:
  84:	61 50       	subi	r22, 0x01	; 1
  86:	70 40       	sbci	r23, 0x00	; 0

void ws2812_sendarray(uint8_t *data,uint16_t datlen)
{
	uint8_t curbyte,ctr;	
	
	while (datlen--) {
  88:	51 f7       	brne	.-44     	; 0x5e <ws2812_sendarray+0x8>
  8a:	08 95       	ret

0000008c <main>:
struct CRGB { uint8_t g; uint8_t r; uint8_t b; };
struct CRGB led[3];

int main(void)
{
	CLKPR=_BV(CLKPCE);
  8c:	80 e8       	ldi	r24, 0x80	; 128
  8e:	86 bd       	out	0x26, r24	; 38
	CLKPR=0;			// set clock prescaler to 1 = 8Mhz clock with RC oscillator (attiny 25/45/85/24/44/84)
  90:	16 bc       	out	0x26, r1	; 38
	
	DDRB|=_BV(PB1);
  92:	b9 9a       	sbi	0x17, 1	; 23
	
    while(1)
    {
		uint8_t i;
		
		led[0].r=255;led[0].g=255;led[0].b=255;
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	c0 93 61 00 	sts	0x0061, r28
  9a:	c0 93 60 00 	sts	0x0060, r28
  9e:	c0 93 62 00 	sts	0x0062, r28
		led[1].r=255;led[1].g=0;led[1].b=0;
  a2:	c0 93 64 00 	sts	0x0064, r28
  a6:	10 92 63 00 	sts	0x0063, r1
  aa:	10 92 65 00 	sts	0x0065, r1
		led[2].r=0;led[2].g=255;led[2].b=0;
  ae:	10 92 67 00 	sts	0x0067, r1
  b2:	c0 93 66 00 	sts	0x0066, r28
  b6:	10 92 68 00 	sts	0x0068, r1

		ws2812_sendarray(&led[0],3*3);
  ba:	80 e6       	ldi	r24, 0x60	; 96
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	69 e0       	ldi	r22, 0x09	; 9
  c0:	70 e0       	ldi	r23, 0x00	; 0
  c2:	c9 df       	rcall	.-110    	; 0x56 <ws2812_sendarray>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	8f ef       	ldi	r24, 0xFF	; 255
  c6:	94 e3       	ldi	r25, 0x34	; 52
  c8:	ac e0       	ldi	r26, 0x0C	; 12
  ca:	81 50       	subi	r24, 0x01	; 1
  cc:	90 40       	sbci	r25, 0x00	; 0
  ce:	a0 40       	sbci	r26, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <main+0x3e>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <main+0x48>
  d4:	00 00       	nop
		_delay_ms(500);
		
		led[0].r=0;led[0].g=255;led[0].b=255;
  d6:	10 92 61 00 	sts	0x0061, r1
  da:	c0 93 60 00 	sts	0x0060, r28
  de:	c0 93 62 00 	sts	0x0062, r28
		led[1].r=0;led[1].g=255;led[1].b=0;
  e2:	10 92 64 00 	sts	0x0064, r1
  e6:	c0 93 63 00 	sts	0x0063, r28
  ea:	10 92 65 00 	sts	0x0065, r1
		led[2].r=0;led[2].g=0;led[2].b=255;
  ee:	10 92 67 00 	sts	0x0067, r1
  f2:	10 92 66 00 	sts	0x0066, r1
  f6:	c0 93 68 00 	sts	0x0068, r28
	
		ws2812_sendarray(&led[0],3*3);
  fa:	80 e6       	ldi	r24, 0x60	; 96
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	69 e0       	ldi	r22, 0x09	; 9
 100:	70 e0       	ldi	r23, 0x00	; 0
 102:	a9 df       	rcall	.-174    	; 0x56 <ws2812_sendarray>
 104:	8f ef       	ldi	r24, 0xFF	; 255
 106:	94 e3       	ldi	r25, 0x34	; 52
 108:	ac e0       	ldi	r26, 0x0C	; 12
 10a:	81 50       	subi	r24, 0x01	; 1
 10c:	90 40       	sbci	r25, 0x00	; 0
 10e:	a0 40       	sbci	r26, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <main+0x7e>
 112:	00 c0       	rjmp	.+0      	; 0x114 <main+0x88>
 114:	00 00       	nop
 116:	bf cf       	rjmp	.-130    	; 0x96 <main+0xa>

00000118 <_exit>:
 118:	f8 94       	cli

0000011a <__stop_program>:
 11a:	ff cf       	rjmp	.-2      	; 0x11a <__stop_program>
